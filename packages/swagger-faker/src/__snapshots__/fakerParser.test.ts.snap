// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fakerParser > 'Object' 1`] = `
"

export function Object() {
  
  return {"firstName": faker.string.alpha(),"age": faker.number.float(),"address": Object.assign({}, faker.string.alpha(), faker.number.float())}
}
"
`;

exports[`fakerParser > 'Order' 1`] = `
"

export function Order() {
  
  return {"status": faker.helpers.arrayElement<any>(["Placed", "Approved"])}
}
"
`;

exports[`fakerParser > 'Record' 1`] = `
"

export function Record() {
  
  return {}
}
"
`;

exports[`fakerParser > 'Upload' 1`] = `
"

export function Upload() {
  
  return undefined
}
"
`;

exports[`parseFakerMeta > 'and' 1`] = `"Object.assign({}, faker.string.alpha(), faker.number.float())"`;

exports[`parseFakerMeta > 'any' 1`] = `"undefined"`;

exports[`parseFakerMeta > 'array' 1`] = `"faker.helpers.arrayElements([faker.helpers.arrayElement<any>([faker.number.float(), faker.string.alpha()])]) as any"`;

exports[`parseFakerMeta > 'arrayAdvanced' 1`] = `"faker.helpers.arrayElements([faker.number.float({ min: 1, max: 10 })]) as any"`;

exports[`parseFakerMeta > 'arrayEmpty' 1`] = `"faker.helpers.arrayElements([]) as any"`;

exports[`parseFakerMeta > 'arrayRef' 1`] = `"faker.helpers.arrayElements([Pet()]) as any"`;

exports[`parseFakerMeta > 'arrayRegex' 1`] = `"faker.helpers.arrayElements([faker.helpers.fromRegExp(new RegExp('^[a-zA-Z0-9]{1,13}$')), faker.string.alpha()]) as any"`;

exports[`parseFakerMeta > 'blob' 1`] = `undefined`;

exports[`parseFakerMeta > 'boolean' 1`] = `"faker.datatype.boolean()"`;

exports[`parseFakerMeta > 'catchall' 1`] = `"{}"`;

exports[`parseFakerMeta > 'date' 1`] = `"faker.date.anytime()"`;

exports[`parseFakerMeta > 'datetime' 1`] = `"faker.date.anytime().toISOString()"`;

exports[`parseFakerMeta > 'default' 1`] = `undefined`;

exports[`parseFakerMeta > 'default' 2`] = `undefined`;

exports[`parseFakerMeta > 'enum' 1`] = `"faker.helpers.arrayElement<any>(["A", "B", "C", 2])"`;

exports[`parseFakerMeta > 'matches' 1`] = `"faker.helpers.fromRegExp(new RegExp('^[A-Z]{2}$'))"`;

exports[`parseFakerMeta > 'matchesReg' 1`] = `"faker.helpers.fromRegExp(new RegExp('node_modules'))"`;

exports[`parseFakerMeta > 'max' 1`] = `undefined`;

exports[`parseFakerMeta > 'min' 1`] = `undefined`;

exports[`parseFakerMeta > 'nullable' 1`] = `undefined`;

exports[`parseFakerMeta > 'number' 1`] = `"faker.number.float()"`;

exports[`parseFakerMeta > 'object' 1`] = `"{"firstName": faker.string.alpha(),"address": faker.string.alpha()}"`;

exports[`parseFakerMeta > 'objectAnd' 1`] = `"{"firstName": faker.string.alpha(),"age": faker.number.float(),"address": Object.assign({}, faker.string.alpha(), faker.number.float())}"`;

exports[`parseFakerMeta > 'objectArray' 1`] = `"{"ids": faker.helpers.arrayElements([faker.helpers.fromRegExp(new RegExp('^[a-zA-Z0-9]{1,13}$')), faker.string.alpha()]) as any}"`;

exports[`parseFakerMeta > 'objectEmpty' 1`] = `"{}"`;

exports[`parseFakerMeta > 'objectEnum' 1`] = `"{"version": faker.helpers.arrayElement<any>(["A", "B", "C", 2])}"`;

exports[`parseFakerMeta > 'objectOptional' 1`] = `"{"firstName": faker.string.alpha(),"address": faker.string.alpha()}"`;

exports[`parseFakerMeta > 'ref' 1`] = `"Pet()"`;

exports[`parseFakerMeta > 'string' 1`] = `"faker.string.alpha()"`;

exports[`parseFakerMeta > 'stringOffset' 1`] = `"faker.date.anytime().toISOString()"`;

exports[`parseFakerMeta > 'tuple' 1`] = `"faker.helpers.arrayElements([]) as any"`;

exports[`parseFakerMeta > 'tupleMulti' 1`] = `"faker.helpers.arrayElements([faker.string.alpha(), faker.number.float()]) as any"`;

exports[`parseFakerMeta > 'undefined' 1`] = `"undefined"`;

exports[`parseFakerMeta > 'union' 1`] = `"faker.helpers.arrayElement<any>([faker.string.alpha(), faker.number.float()])"`;

exports[`parseFakerMeta > 'unionOne' 1`] = `"faker.helpers.arrayElement<any>([faker.string.alpha()])"`;

exports[`parseFakerMeta > 'unknown' 1`] = `"unknown"`;
