// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Zod SchemaGenerator > 'MixedValueTypeConst' 1`] = `
"export const mixedValueTypeConst = z.object({ foobar: z.literal('foobar') }).describe('This probably should fail miserably')
"
`;

exports[`Zod SchemaGenerator > 'NullConst' 1`] = `
"export const nullConst = z.coerce.string().uuid().nullable()
"
`;

exports[`Zod SchemaGenerator > 'NullableString' 1`] = `
"export const nullableString = z.coerce.string().nullable()
"
`;

exports[`Zod SchemaGenerator > 'NullableStringUuid' 1`] = `
"export const nullableStringUuid = z.coerce.string().uuid().nullable()
"
`;

exports[`Zod SchemaGenerator > 'NullableStringWithAnyOf' 1`] = `
"export const nullableStringWithAnyOf = z.union([z.coerce.string(), z.null()])
"
`;

exports[`Zod SchemaGenerator > 'NumberValueConst' 1`] = `
"export const numberValueConst = z.object({ foobar: z.literal(42) }).describe('its value is equal to the value of the keyword')
"
`;

exports[`Zod SchemaGenerator > 'OptionalPet typed' 1`] = `
"export const optionalPetTyped = z.object({
  id: z.coerce.number().optional(),
  name: z.coerce.string().optional(),
  tag: z.coerce.string().optional(),
}) as z.ZodType<OptionalPetTyped>
"
`;

exports[`Zod SchemaGenerator > 'OptionalPet' 1`] = `
"export const optionalPet = z.object({
  id: z.coerce.number().optional(),
  name: z.coerce.string().optional(),
  tag: z.coerce.string().optional(),
}) as z.ZodType<OptionalPet>
"
`;

exports[`Zod SchemaGenerator > 'Order dateType date' 1`] = `
"export const orderDateTypeDate = z.object({
  id: z.coerce.number().optional(),
  petId: z.coerce.number().optional(),
  quantity: z.coerce.number().optional(),
  shipDate: z.date().optional(),
  status: z.enum(['placed', 'approved', 'delivered']).describe('Order Status').optional(),
  complete: z.boolean().optional(),
})
"
`;

exports[`Zod SchemaGenerator > 'Order dateType false' 1`] = `
"export const orderDateTypeFalse = z.object({
  id: z.coerce.number().optional(),
  petId: z.coerce.number().optional(),
  quantity: z.coerce.number().optional(),
  shipDate: z.coerce.string().optional(),
  status: z.enum(['placed', 'approved', 'delivered']).describe('Order Status').optional(),
  complete: z.boolean().optional(),
})
"
`;

exports[`Zod SchemaGenerator > 'Order dateType string' 1`] = `
"export const orderDateTypeString = z.object({
  id: z.coerce.number().optional(),
  petId: z.coerce.number().optional(),
  quantity: z.coerce.number().optional(),
  shipDate: z.string().datetime().optional(),
  status: z.enum(['placed', 'approved', 'delivered']).describe('Order Status').optional(),
  complete: z.boolean().optional(),
})
"
`;

exports[`Zod SchemaGenerator > 'Pet' 1`] = `
"export const pet = z.object({ id: z.coerce.number(), name: z.coerce.string(), date: z.date().optional(), tag: z.coerce.string().min(5).max(100).optional() })
"
`;

exports[`Zod SchemaGenerator > 'PetArray' 1`] = `
"export const petArray = z
  .array(z.lazy(() => Pet))
  .min(1)
  .max(3)
  .describe('List of Pet object')
"
`;

exports[`Zod SchemaGenerator > 'PetTuple' 1`] = `
"export const petTuple = z.tuple([z.coerce.string(), z.coerce.string()]).describe('Tuple of exact length 2')
"
`;

exports[`Zod SchemaGenerator > 'PetTupleObject' 1`] = `
"export const petTupleObject = z
  .object({ tupleProperty: z.tuple([z.coerce.string(), z.coerce.string()]).optional() })
  .describe('Tuple of exact length 2 nested in an object')
"
`;

exports[`Zod SchemaGenerator > 'Pets' 1`] = `
"export const pets = z.array(z.object({ id: z.coerce.number(), name: z.coerce.string(), tag: z.coerce.string().optional() }))
"
`;

exports[`Zod SchemaGenerator > 'StringValueConst' 1`] = `
"export const stringValueConst = z.object({ foobar: z.literal('foobar') }).describe('its value is equal to the value of the keyword')
"
`;

exports[`Zod SchemaGenerator > 'UuidSchema' 1`] = `
"export const uuidSchema = z.coerce.string().uuid()
"
`;

exports[`Zod SchemaGenerator > 'anyof' 1`] = `
"export const anyof = z.union([
  z.object({ propertyA: z.coerce.string() }).strict(),
  z.object({ propertyA: z.coerce.string(), propertyB: z.coerce.string() }).strict(),
])
"
`;

exports[`Zod SchemaGenerator > 'enumNames' 1`] = `
"export const enumNames = z.enum(['0', '1'])
"
`;

exports[`Zod SchemaGenerator > 'enumNullable 3.1' 1`] = `
"export const enumNullable31 = z.enum(['Pending', 'Received']).nullable()
"
`;

exports[`Zod SchemaGenerator > 'enumVarNames' 1`] = `
"export const enumVarNames = z.union([z.literal(0), z.literal(1)])
"
`;

exports[`Zod SchemaGenerator > 'lazy' 1`] = `
"export const lazy = z.object({ nestedExamples: z.lazy(() => Example).optional() })
"
`;

exports[`Zod SchemaGenerator > 'recursive' 1`] = `
"export const recursive = z.object({ name: z.coerce.string(), children: z.array(z.lazy(() => Example)) })
"
`;
