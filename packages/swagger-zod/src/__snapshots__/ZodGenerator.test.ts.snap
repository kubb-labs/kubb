// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ZodGenerator PetStore > generate schema for OptionalPet 1`] = `
[
  "
export const OptionalPet = z.object({"id": z.number().optional(),"name": z.string().optional(),"tag": z.string().optional()})
",
]
`;

exports[`ZodGenerator PetStore > generate schema for OptionalPet typed 1`] = `
[
  "
export const OptionalPet = z.object({"id": z.number().optional(),"name": z.string().optional(),"tag": z.string().optional()}) as z.ZodType<OptionalPet>
",
]
`;

exports[`ZodGenerator PetStore > generate schema for Pet 1`] = `
[
  "
export const Pet = z.object({"id": z.number(),"name": z.string(),"tag": z.string().min(5).max(100).optional()})
",
]
`;

exports[`ZodGenerator PetStore > generate schema for PetArray 1`] = `
[
  "
export const PetArray = z.array(z.lazy(() => Pet)).min(1).max(3).describe("List of Pet object")
",
]
`;

exports[`ZodGenerator PetStore > generate schema for Pets 1`] = `
[
  "
export const Pets = z.array(z.object({"id": z.number(),"name": z.string(),"tag": z.string().optional()}))
",
]
`;

exports[`ZodGenerator anyof > anyof with 2 objects 1`] = `
[
  "
export const test = z.union([z.object({"propertyA": z.string()}).strict(), z.object({"propertyA": z.string(),"propertyB": z.string()}).strict()])
",
]
`;

exports[`ZodGenerator constCases > MixedValueTypeConst generates zod literal value correctly, overriding the type constraint 1`] = `
[
  "
export const MixedValueTypeConst = z.object({"foobar": z.literal("foobar")}).describe("This probably should fail miserably")
",
]
`;

exports[`ZodGenerator constCases > NullConst zodifies correctly 1`] = `
[
  "
export const NullConst = z.null()
",
]
`;

exports[`ZodGenerator constCases > NullableString zodifies correctly 1`] = `
[
  "
export const NullableString = z.string().nullable()
",
]
`;

exports[`ZodGenerator constCases > NullableStringUuid zodifies correctly to a uuid or null 1`] = `
[
  "
export const NullableStringUuid = z.string().uuid().nullable()
",
]
`;

exports[`ZodGenerator constCases > NullableStringWithAnyOf results in union of string and null 1`] = `
[
  "
export const NullableStringWithAnyOf = z.union([z.string(), z.null()])
",
]
`;

exports[`ZodGenerator constCases > NumberValueConst correctly generates zod literal 1`] = `
[
  "
export const NumberValueConst = z.object({"foobar": z.literal(42)}).describe("its value is equal to the value of the keyword")
",
]
`;

exports[`ZodGenerator constCases > StringValueConst correctly generates zod literal 1`] = `
[
  "
export const StringValueConst = z.object({"foobar": z.literal("foobar")}).describe("its value is equal to the value of the keyword")
",
]
`;

exports[`ZodGenerator constCases > UuidSchema generates a string with uuid format constraint 1`] = `
[
  "
export const UuidSchema = z.string().uuid()
",
]
`;

exports[`ZodGenerator enums > generate x-enum-varnames types 1`] = `
[
  "
export const enumVarNames = z.union([z.literal(0), z.literal(1)])
",
]
`;

exports[`ZodGenerator enums > generate x-enumNames types 1`] = `
[
  "
export const enumNames = z.enum(["0", "1"])
",
]
`;

exports[`ZodGenerator lazy > generate schema for Example 1`] = `
[
  "
export const Example = z.object({"nestedExamples": z.lazy(() => Example).optional()})
",
]
`;

exports[`ZodGenerator recursive > generate schema for Example 1`] = `
[
  "
export const Example = z.object({"name": z.string(),"children": z.array(z.lazy(() => Example))})
",
]
`;
