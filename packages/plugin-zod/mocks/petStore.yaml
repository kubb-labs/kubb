openapi: 3.1.0
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: string
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - 'name'
                - 'tag'
              properties:
                name:
                  type: string
                tag:
                  type: string
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
        - name: testId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Pet:
      type: [object]
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        date:
          type: string
          format: date
        uuid:
          type: string
          format: uuid
        email:
          type: string
          format: email
        pattern:
          type: string
          pattern: "^[a-zA-Z0-9]{3}$"
        tag:
          type: string
          maxLength: 100
          minLength: 5
    PetArray:
      description: List of Pet object
      type: array
      minItems: 1
      maxItems: 3
      items:
        $ref: '#/components/schemas/Pet'
    OptionalPet:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    PetTuple:
      maxItems: 2
      minItems: 2
      prefixItems:
        - type: string
        - type: string
      title: Attributes
      type: array
      description: Tuple of exact length 2
      PetTuple:
        maxItems: 2
        minItems: 2
        prefixItems:
          - type: string
          - type: string
        type: array
        description: Tuple of exact length 2
    PetTupleObject:
      type: object
      description: Tuple of exact length 2 nested in an object
      properties:
        tupleProperty:
          type: array,
          maxItems: 2,
          minItems: 2,
          prefixItems:
            - type: string
            - type: string
    Pets:
      type: array
      items: {
        type: 'object',
        required: ['id', 'name'],
        properties: { id: { type: 'integer', format: 'int64' }, name: { type: 'string' }, tag: { type: 'string' } },
      }
    Toy:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          default: null
          nullable: true
      default: null
      nullable: true
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
