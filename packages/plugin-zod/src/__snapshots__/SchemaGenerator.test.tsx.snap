// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Zod SchemaGenerator > 'MixedValueTypeConst' 1`] = `"export const mixedValueTypeConst = z.object({"foobar": z.literal("foobar")}).describe("This probably should fail miserably")"`;

exports[`Zod SchemaGenerator > 'NullConst' 1`] = `"export const nullConst = z.string().uuid().nullable()"`;

exports[`Zod SchemaGenerator > 'NullableString' 1`] = `"export const nullableString = z.string().nullable()"`;

exports[`Zod SchemaGenerator > 'NullableStringUuid' 1`] = `"export const nullableStringUuid = z.string().uuid().nullable()"`;

exports[`Zod SchemaGenerator > 'NullableStringWithAnyOf' 1`] = `"export const nullableStringWithAnyOf = z.union([z.string(), z.null()])"`;

exports[`Zod SchemaGenerator > 'NumberValueConst' 1`] = `"export const numberValueConst = z.object({"foobar": z.literal(42)}).describe("its value is equal to the value of the keyword")"`;

exports[`Zod SchemaGenerator > 'OptionalPet typed' 1`] = `"export const optionalPetTyped = z.object({"id": z.number().int().optional(),"name": z.string().optional(),"tag": z.string().optional()}) as z.ZodType<OptionalPetTyped>"`;

exports[`Zod SchemaGenerator > 'OptionalPet' 1`] = `"export const optionalPet = z.object({"id": z.number().int().optional(),"name": z.string().optional(),"tag": z.string().optional()}) as z.ZodType<OptionalPet>"`;

exports[`Zod SchemaGenerator > 'Order dateType date' 1`] = `"export const orderDateTypeDate = z.object({"id": z.number().int().optional(),"petId": z.number().int().optional(),"quantity": z.number().int().optional(),"shipDate": z.date().optional(),"status": z.enum(["placed", "approved", "delivered"]).describe("Order Status").optional(),"complete": z.boolean().optional()})"`;

exports[`Zod SchemaGenerator > 'Order dateType false' 1`] = `"export const orderDateTypeFalse = z.object({"id": z.number().int().optional(),"petId": z.number().int().optional(),"quantity": z.number().int().optional(),"shipDate": z.string().optional(),"status": z.enum(["placed", "approved", "delivered"]).describe("Order Status").optional(),"complete": z.boolean().optional()})"`;

exports[`Zod SchemaGenerator > 'Order dateType string' 1`] = `"export const orderDateTypeString = z.object({"id": z.number().int().optional(),"petId": z.number().int().optional(),"quantity": z.number().int().optional(),"shipDate": z.string().datetime().optional(),"status": z.enum(["placed", "approved", "delivered"]).describe("Order Status").optional(),"complete": z.boolean().optional()})"`;

exports[`Zod SchemaGenerator > 'Pet' 1`] = `"export const pet = z.object({"id": z.number().int(),"name": z.string(),"date": z.date().optional(),"tag": z.string().min(5).max(100).optional()})"`;

exports[`Zod SchemaGenerator > 'PetArray' 1`] = `"export const petArray = z.array(z.lazy(() => pet)).min(1).max(3).describe("List of Pet object")"`;

exports[`Zod SchemaGenerator > 'PetCoercion' 1`] = `"export const petCoercion = z.object({"id": z.coerce.number().int(),"name": z.coerce.string(),"date": z.coerce.date().optional(),"tag": z.coerce.string().min(5).max(100).optional()})"`;

exports[`Zod SchemaGenerator > 'PetTuple' 1`] = `"export const petTuple = z.tuple([z.string(), z.string()]).describe("Tuple of exact length 2")"`;

exports[`Zod SchemaGenerator > 'PetTupleObject' 1`] = `"export const petTupleObject = z.object({"tupleProperty": z.tuple([z.string(), z.string()]).optional()}).describe("Tuple of exact length 2 nested in an object")"`;

exports[`Zod SchemaGenerator > 'Pets' 1`] = `
"export const pets = z.array(z.object({"id": z.number().int(),"name": z.string(),"tag": z.string().optional()}))

export type Pets = z.infer<typeof pets>"
`;

exports[`Zod SchemaGenerator > 'StringValueConst' 1`] = `"export const stringValueConst = z.object({"foobar": z.literal("foobar")}).describe("its value is equal to the value of the keyword")"`;

exports[`Zod SchemaGenerator > 'UuidSchema' 1`] = `"export const uuidSchema = z.string().uuid()"`;

exports[`Zod SchemaGenerator > 'anyof' 1`] = `"export const anyof = z.union([z.object({"propertyA": z.string()}).strict(), z.object({"propertyA": z.string(),"propertyB": z.string()}).strict()])"`;

exports[`Zod SchemaGenerator > 'enumNames' 1`] = `"export const enumNames = z.enum(["0", "1"])"`;

exports[`Zod SchemaGenerator > 'enumNullable 3.1' 1`] = `"export const enumNullable31 = z.enum(["Pending", "Received"]).nullable()"`;

exports[`Zod SchemaGenerator > 'enumVarNames' 1`] = `"export const enumVarNames = z.union([z.literal(0), z.literal(1)])"`;

exports[`Zod SchemaGenerator > 'lazy' 1`] = `"export const lazy = z.object({"nestedExamples": z.lazy(() => example).optional()})"`;

exports[`Zod SchemaGenerator > 'oneof' 1`] = `"export const oneof = z.union([z.object({"propertyA": z.string().optional()}), z.object({"propertyA": z.string().optional()})])"`;

exports[`Zod SchemaGenerator > 'recursive' 1`] = `"export const recursive = z.object({"name": z.string(),"children": z.array(z.lazy(() => example))})"`;
