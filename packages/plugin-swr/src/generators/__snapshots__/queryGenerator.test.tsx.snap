// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`queryGenerator operation > 'getPets' 1`] = `
"type ListPetsClient = typeof client<ListPetsQueryResponse, never, never>

type ListPets = 
            {
              data: ListPetsQueryResponse
              error: never
              request: never
              pathParams: never
              queryParams: ListPetsQueryParams
              headerParams: never
              response: ListPetsQueryResponse
              client: {
                parameters: Partial<Parameters<ListPetsClient>[0]>
                return: Awaited<ReturnType<ListPetsClient>>
              }
            }

export function listPetsQueryOptions<TData = ListPets['response'>(params?: ListPetsQueryParams, options: Partial<Parameters<typeof client>[0]> = {}): SWRConfiguration<TData, ListPets['error']> {
        return {
            fetcher: async () => {
              const res = await client<TData, ListPets['error']>({ method : "get", url : \`/pets\`, params, ... options })
  return {...res, data: listPetsQueryResponse.parse(res.data)}        },
          }
          
}

/**
 * @summary List all pets
 * @link /pets
 */
export function listPets<TData = ListPets["response"]>(params?: ListPets['queryParams'], options?: {
            query?: SWRConfiguration<TData, ListPets["error"]>,
            client?: ListPets['client']['parameters'],
            shouldFetch?: boolean,
          }): SWRResponse<TData, ListPets["error"]> {
  
             const { query: queryOptions, client: clientOptions = {}, shouldFetch = true } = options ?? {}
    
             const url = \`/pets\`
             const query = useSWR<TData, ListPets["error"], [typeof url, typeof params] | null>(
              shouldFetch ? [url, params]: null,
              {
                ...listPetsQueryOptions<TData>(params, clientOptions),
                ...queryOptions
              }
             )
    
             return query
             
}"
`;

exports[`queryGenerator operation > 'showPetById' 1`] = `
"type ShowPetByIdClient = typeof client<ShowPetByIdQueryResponse, never, never>

type ShowPetById = 
            {
              data: ShowPetByIdQueryResponse
              error: never
              request: never
              pathParams: ShowPetByIdPathParams
              queryParams: never
              headerParams: never
              response: ShowPetByIdQueryResponse
              client: {
                parameters: Partial<Parameters<ShowPetByIdClient>[0]>
                return: Awaited<ReturnType<ShowPetByIdClient>>
              }
            }

export function showPetByIdQueryOptions<TData = ShowPetById['response'>(petId: ShowPetByIdPathParams["petId"], testId: ShowPetByIdPathParams["testId"], options: Partial<Parameters<typeof client>[0]> = {}): SWRConfiguration<TData, ShowPetById['error']> {
        return {
            fetcher: async () => {
              const res = await client<TData, ShowPetById['error']>({ method : "get", url : \`/pets/\${petId}\`, ... options })
  return {...res, data: showPetByIdQueryResponse.parse(res.data)}        },
          }
          
}

/**
 * @summary Info for a specific pet
 * @link /pets/:petId
 */
export function showPetById<TData = ShowPetById["response"]>(petId: ShowPetByIdPathParams["petId"], testId: ShowPetByIdPathParams["testId"], options?: {
            query?: SWRConfiguration<TData, ShowPetById["error"]>,
            client?: ShowPetById['client']['parameters'],
            shouldFetch?: boolean,
          }): SWRResponse<TData, ShowPetById["error"]> {
  
           const { query: queryOptions, client: clientOptions = {}, shouldFetch = true } = options ?? {}
    
           const url = \`/pets/\${petId}\`
           const query = useSWR<TData, ShowPetById["error"], typeof url | null>(
            shouldFetch ? url : null,
            {
              ...showPetByIdQueryOptions<TData>(petId, testId, clientOptions),
              ...queryOptions
            }
           )
    
           return query
           
}"
`;
