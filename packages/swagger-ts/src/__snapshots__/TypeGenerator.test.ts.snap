// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`TypeGenerator discriminator > Cat.type defined as const 1`] = `
"export type Cat = {
    /**
     * @type string uuid
    */
    id: string;
    type: "Cat";
    /**
     * @type boolean | undefined
    */
    meow?: boolean;
};
"
`;

exports[`TypeGenerator discriminator > Dog.type defined as const 1`] = `
"export type Dog = {
    /**
     * @type string uuid
    */
    id: string;
    /**
     * @type number | undefined
    */
    bark?: number;
    type: "Dog";
};
"
`;

exports[`TypeGenerator discriminator > MixedValueTypeConst ignores type constraint in favor of const constraint 1`] = `
"export type MixedValueTypeConst = {
    /**
     * @type number | undefined
    */
    foobar?: "foobar";
};
"
`;

exports[`TypeGenerator discriminator > NullConst correctly produces "null" 1`] = `
"export type NullConst = {
    withoutValue?: null;
};
"
`;

exports[`TypeGenerator discriminator > NumberValueConst const correctly produces \`42\` 1`] = `
"export type NumberValueConst = {
    /**
     * @type number | undefined
    */
    foobar?: 42;
};
"
`;

exports[`TypeGenerator discriminator > PetStore defined as array with type union 1`] = `
"export type Petstore = {
    /**
     * @type integer
    */
    id: number;
    /**
     * @type array | undefined
     * @default
    */
    pets?: (Cat | Dog)[];
};
"
`;

exports[`TypeGenerator discriminator > StringValueConst const correctly produces "foobar" 1`] = `
"export type StringValueConst = {
    /**
     * @type string | undefined
    */
    foobar?: "foobar";
};
"
`;

exports[`TypeGenerator enums > generate with enumtype asPascalConst 1`] = `
"export const EnumNames = {
  Pending: 0,
  Received: 1,
} as const
export type EnumNames = (typeof EnumNames)[keyof typeof EnumNames]
"
`;

exports[`TypeGenerator enums > generate with enumtype constEnum 1`] = `
"export const enum EnumNames {
  'Pending' = 0,
  'Received' = 1,
}
"
`;

exports[`TypeGenerator enums > generate with enumtype enum 1`] = `
"export enum EnumNames {
  'Pending' = 0,
  'Received' = 1,
}
"
`;

exports[`TypeGenerator enums > generate with enumtype literal 1`] = `
"export type EnumNames = 0 | 1
"
`;

exports[`TypeGenerator enums > generate x-enum-varnames types 1`] = `
"export const enumVarNames = {
  Pending: 0,
  Received: 1,
} as const
export type EnumVarNames = (typeof enumVarNames)[keyof typeof enumVarNames]
"
`;

exports[`TypeGenerator enums > generate x-enumNames types 1`] = `
"export const enumVarNames = {
  Pending: 0,
  Received: 1,
} as const
export type EnumVarNames = (typeof enumVarNames)[keyof typeof enumVarNames]
export const enumNames = {
  Pending: 0,
  Received: 1,
} as const
export type EnumNames = (typeof enumNames)[keyof typeof enumNames]
"
`;

exports[`TypeGenerator petStore > generate type for Pet with optionalType \`questionToken\` 1`] = `
"export type Pet = {
  /**
   * @type integer int64
   */
  id: number
  /**
   * @type string
   */
  name: string
  /**
   * @type string | undefined
   */
  tag?: string
}
"
`;

exports[`TypeGenerator petStore > generate type for Pet with optionalType \`questionTokenAndUndefined\` 1`] = `
"export type Pet = {
  /**
   * @type integer int64
   */
  id: number
  /**
   * @type string
   */
  name: string
  /**
   * @type string | undefined
   */
  tag?: string | undefined
}
"
`;

exports[`TypeGenerator petStore > generate type for Pet with optionalType \`undefined\` 1`] = `
"export type Pet = {
  /**
   * @type integer int64
   */
  id: number
  /**
   * @type string
   */
  name: string
  /**
   * @type string | undefined
   */
  tag: string | undefined
}
"
`;

exports[`TypeGenerator petStore > generate type for Pets 1`] = `
"export type Pets = {
  /**
   * @type integer int64
   */
  id: number
  /**
   * @type string
   */
  name: string
  /**
   * @type string | undefined
   */
  tag?: string
}[]
"
`;

exports[`TypeGenerator petStore > generate type for nullable fields 1`] = `
"export type Test = {
  /**
   * @type string | undefined
   */
  foo?: string | null
}
"
`;

exports[`TypeGenerator petStoreRef > generate type for Pets 1`] = `
"export type Pets = Pet[]
"
`;

exports[`TypeGenerator type assertions > generates Date type correctly 1`] = `
"export type PlainDate = Date;
"
`;

exports[`TypeGenerator type assertions > generates Email type correctly 1`] = `
"export type PlainEmail = string;
"
`;

exports[`TypeGenerator type assertions > generates Plain_File types correctly 1`] = `
"export type PlainFile = Blob;
"
`;

exports[`TypeGenerator type assertions > generates Time type correctly 1`] = `
"export type PlainTime = number;
"
`;

exports[`TypeGenerator type assertions > generates UUID type correctly 1`] = `
"export type PlainUuid = string;
"
`;

exports[`TypeGenerator type assertions > generates file property with \`File\` type 1`] = `
"export type BodyUploadFileApiAssetsPost = {
    /**
     * @type string binary
    */
    file: Blob;
};
"
`;
