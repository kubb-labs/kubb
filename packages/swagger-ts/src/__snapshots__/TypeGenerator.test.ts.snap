// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`TypeGenerator discriminator > Cat.type defined as const 1`] = `
[
  "/**
 * @type "object"
*/
export type Cat = {
    /**
     * @type "string" | undefined uuid
    */
    id?: string;
    type?;
    /**
     * @type "boolean" | undefined
    */
    meow?: boolean;
};
",
]
`;

exports[`TypeGenerator discriminator > Dog.type defined as const 1`] = `
[
  "/**
 * @type "object"
*/
export type Dog = {
    /**
     * @type "string" | undefined uuid
    */
    id?: string;
    /**
     * @type "number" | undefined
    */
    bark?: number;
    type?;
};
",
]
`;

exports[`TypeGenerator discriminator > MixedValueTypeConst ignores type constraint in favor of const constraint 1`] = `
[
  "/**
 * @description "This probably should fail miserably"
*/
export type MixedValueTypeConst = {
    foobar?;
};
",
]
`;

exports[`TypeGenerator discriminator > NullConst correctly produces "null" 1`] = `
[
  "/**
 * @description "The value of this keyword MAY be null. \\nUse of this keyword is functionally equivalent to an \\"enum\\" (Section 6.1.2) with a single value.\\nAn instance validates successfully against this keyword if its value is equal to the value of the keyword.\\n"
*/
export type NullConst = {
    withoutValue?: null;
};
",
]
`;

exports[`TypeGenerator discriminator > NumberValueConst const correctly produces \`42\` 1`] = `
[
  "/**
 * @description "its value is equal to the value of the keyword"
*/
export type NumberValueConst = {
    foobar?;
};
",
]
`;

exports[`TypeGenerator discriminator > PetStore defined as array with type union 1`] = `
[
  "/**
 * @description "A project is an analysis project. It has a name, an id, and has a dataset"
 * @type "object"
*/
export type Petstore = {
    /**
     * @type "integer" | undefined
    */
    id?: number;
    /**
     * @type "array" | undefined
    */
    pets?: (Cat | Dog)[];
};
",
]
`;

exports[`TypeGenerator discriminator > StringValueConst const correctly produces "foobar" 1`] = `
[
  "/**
 * @description "its value is equal to the value of the keyword"
*/
export type StringValueConst = {
    foobar?;
};
",
]
`;

exports[`TypeGenerator enums > generate with enumtype asPascalConst 1`] = `
[
  "export const EnumNames = {
    "Pending": 0,
    "Received": 1
} as const;
export type EnumNames = (typeof EnumNames)[keyof typeof EnumNames];
export type enumNames = EnumNames;
",
]
`;

exports[`TypeGenerator enums > generate with enumtype constEnum 1`] = `
[
  "export const enum EnumNames {
    "Pending" = 0,
    "Received" = 1
}
export type enumNames = EnumNames;
",
]
`;

exports[`TypeGenerator enums > generate with enumtype enum 1`] = `
[
  "export enum EnumNames {
    "Pending" = 0,
    "Received" = 1
}
export type enumNames = EnumNames;
",
]
`;

exports[`TypeGenerator enums > generate with enumtype literal 1`] = `
[
  "export type EnumNames = 0 | 1;
export type enumNames = EnumNames;
",
]
`;

exports[`TypeGenerator enums > generate x-enum-varnames types 1`] = `
[
  "/**
 * @type "integer"
*/
export type enumVarNames = undefined;
",
]
`;

exports[`TypeGenerator enums > generate x-enumNames types 1`] = `
[
  "export const enumNames = {
    "Pending": 0,
    "Received": 1
} as const;
export type EnumNames = (typeof enumNames)[keyof typeof enumNames];
export type enumNames = EnumNames;
",
]
`;

exports[`TypeGenerator petStore > generate type for Pet with optionalType \`questionToken\` 1`] = `
[
  "/**
 * @type "object"
*/
export type Pet = {
    /**
     * @type "integer" | undefined int64
    */
    id?: number;
    /**
     * @type "string" | undefined
    */
    name?: string;
    /**
     * @type "string" | undefined
    */
    tag?: string;
};
",
]
`;

exports[`TypeGenerator petStore > generate type for Pet with optionalType \`questionTokenAndUndefined\` 1`] = `
[
  "/**
 * @type "object"
*/
export type Pet = {
    /**
     * @type "integer" | undefined int64
    */
    id?: number | undefined;
    /**
     * @type "string" | undefined
    */
    name?: string | undefined;
    /**
     * @type "string" | undefined
    */
    tag?: string | undefined;
};
",
]
`;

exports[`TypeGenerator petStore > generate type for Pet with optionalType \`undefined\` 1`] = `
[
  "/**
 * @type "object"
*/
export type Pet = {
    /**
     * @type "integer" | undefined int64
    */
    id: number | undefined;
    /**
     * @type "string" | undefined
    */
    name: string | undefined;
    /**
     * @type "string" | undefined
    */
    tag: string | undefined;
};
",
]
`;

exports[`TypeGenerator petStore > generate type for Pets 1`] = `
[
  "/**
 * @type "array"
*/
export type Pets = {
    /**
     * @type "integer" | undefined int64
    */
    id?: number;
    /**
     * @type "string" | undefined
    */
    name?: string;
    /**
     * @type "string" | undefined
    */
    tag?: string;
}[];
",
]
`;

exports[`TypeGenerator petStore > generate type for nullable fields 1`] = `
[
  "/**
 * @type "object"
*/
export type Test = {
    /**
     * @type "string"
    */
    foo: string | null;
};
",
]
`;

exports[`TypeGenerator petStoreRef > generate type for Pets 1`] = `
[
  "/**
 * @type "array"
*/
export type Pets = Pet[];
",
]
`;
