// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`faker parse > 'and' 1`] = `"Object.assign({}, faker.string.alpha(), faker.number.float())"`;

exports[`faker parse > 'any' 1`] = `"undefined"`;

exports[`faker parse > 'array' 1`] = `"faker.helpers.multiple(() => (faker.helpers.arrayElement<any>([faker.number.float(), faker.string.alpha()])))"`;

exports[`faker parse > 'arrayAdvanced' 1`] = `"faker.helpers.multiple(() => (faker.number.float({ min: 1, max: 10 })), { count: { min: 3, max: 10 }})"`;

exports[`faker parse > 'arrayEmpty' 1`] = `"faker.helpers.multiple(() => (undefined))"`;

exports[`faker parse > 'arrayRef' 1`] = `"faker.helpers.multiple(() => (Pet()))"`;

exports[`faker parse > 'arrayRegex' 1`] = `"faker.helpers.multiple(() => (faker.helpers.fromRegExp("^[a-zA-Z0-9]{1,13}$")), { count: { min: 3, max: 10 }})"`;

exports[`faker parse > 'blob' 1`] = `"faker.image.url() as unknown as Blob"`;

exports[`faker parse > 'boolean' 1`] = `"faker.datatype.boolean()"`;

exports[`faker parse > 'catchall' 1`] = `"{}"`;

exports[`faker parse > 'const' 1`] = `""""`;

exports[`faker parse > 'date' 1`] = `"faker.date.anytime().toISOString().substring(0, 10)"`;

exports[`faker parse > 'datetime' 1`] = `"faker.date.anytime().toISOString()"`;

exports[`faker parse > 'default' 1`] = `undefined`;

exports[`faker parse > 'default' 2`] = `undefined`;

exports[`faker parse > 'enum' 1`] = `"faker.helpers.arrayElement<any>(["A", "B", "C", 2])"`;

exports[`faker parse > 'enumLiteralBoolean' 1`] = `"faker.helpers.arrayElement<any>([true, false])"`;

exports[`faker parse > 'integer' 1`] = `"faker.number.int()"`;

exports[`faker parse > 'matches' 1`] = `"faker.helpers.fromRegExp("^[A-Z]{2}$")"`;

exports[`faker parse > 'matchesReg' 1`] = `"faker.helpers.fromRegExp("/node_modules/")"`;

exports[`faker parse > 'max' 1`] = `undefined`;

exports[`faker parse > 'min' 1`] = `undefined`;

exports[`faker parse > 'nullable' 1`] = `undefined`;

exports[`faker parse > 'nullableAdditionalProperties' 1`] = `"{}"`;

exports[`faker parse > 'number' 1`] = `"faker.number.float()"`;

exports[`faker parse > 'object' 1`] = `"{"firstName": faker.string.alpha({ length: 2 }),"address": faker.string.alpha()}"`;

exports[`faker parse > 'objectAnd' 1`] = `"{"firstName": faker.string.alpha({ length: 2 }),"age": faker.number.float({ min: 3 }),"address": Object.assign({}, faker.string.alpha(), faker.number.float())}"`;

exports[`faker parse > 'objectArray' 1`] = `"{"ids": faker.helpers.multiple(() => (faker.helpers.fromRegExp("^[a-zA-Z0-9]{1,13}$")), { count: { min: 3, max: 10 }})}"`;

exports[`faker parse > 'objectArrayObject' 1`] = `"{"ids": faker.helpers.multiple(() => ({"enum": faker.helpers.arrayElement<NonNullable<NonNullable<NonNullable<Pet>["ids"]>[number]>["enum"]>(["A", "B", "C", 2])}), { count: { min: 3, max: 10 }})}"`;

exports[`faker parse > 'objectDates' 1`] = `"{"dateTime": faker.date.anytime().toISOString(),"date": faker.date.anytime().toISOString().substring(0, 10),"time": faker.date.anytime().toISOString().substring(11, 19),"nativeDate": faker.date.anytime()}"`;

exports[`faker parse > 'objectEmpty' 1`] = `"{}"`;

exports[`faker parse > 'objectEnum' 1`] = `"{"version": faker.helpers.arrayElement<NonNullable<Pet>["version"]>(["A", "B", "C", 2])}"`;

exports[`faker parse > 'objectObjectEnum' 1`] = `"{"prop1": {"prop2": faker.helpers.arrayElement<NonNullable<NonNullable<Pet>["prop1"]>["prop2"]>(["A", "B"])}}"`;

exports[`faker parse > 'objectOptional' 1`] = `"{"firstName": faker.string.alpha({ length: 2 }),"address": faker.string.alpha()}"`;

exports[`faker parse > 'primitiveDate' 1`] = `"faker.date.anytime()"`;

exports[`faker parse > 'ref' 1`] = `"Pet()"`;

exports[`faker parse > 'string' 1`] = `"faker.string.alpha()"`;

exports[`faker parse > 'stringLocal' 1`] = `"faker.date.anytime().toISOString()"`;

exports[`faker parse > 'stringOffset' 1`] = `"faker.date.anytime().toISOString()"`;

exports[`faker parse > 'time' 1`] = `"faker.date.anytime().toISOString().substring(11, 19)"`;

exports[`faker parse > 'tuple' 1`] = `"[]"`;

exports[`faker parse > 'tupleMulti' 1`] = `"[faker.string.alpha(), faker.number.float()]"`;

exports[`faker parse > 'undefined' 1`] = `"undefined"`;

exports[`faker parse > 'union' 1`] = `"faker.helpers.arrayElement<any>([faker.string.alpha(), faker.number.float()])"`;

exports[`faker parse > 'unionOne' 1`] = `"faker.helpers.arrayElement<any>([faker.string.alpha()])"`;

exports[`faker parse > 'unknown' 1`] = `"undefined"`;
