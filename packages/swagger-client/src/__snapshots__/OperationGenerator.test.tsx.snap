// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`OperationGenerator > [GET] should generate with pathParamsType \`inline\` 1`] = `
[
  {
    "baseName": "showPetById.ts",
    "env": undefined,
    "exports": [],
    "id": undefined,
    "imports": [
      {
        "isTypeOnly": undefined,
        "name": "client",
        "path": "@kubb/swagger-client/client",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "ResponseConfig",
        ],
        "path": "@kubb/swagger-client/client",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "ShowPetByIdQueryResponse",
          "ShowPetByIdPathParams",
        ],
        "path": "showPetById.ts",
        "root": "showPetById.ts",
      },
    ],
    "meta": {
      "name": "showPetById",
      "pluginKey": undefined,
      "tag": "pets",
    },
    "override": undefined,
    "path": "showPetById.ts",
    "source": "/**
     * @summary Info for a specific pet
     * @link /pets/:pet_id */
export async function showPetById(petId: ShowPetByIdPathParams["pet_id"], testId: ShowPetByIdPathParams["testId"], options: Partial<Parameters<typeof client>[0]> = {}): Promise<ResponseConfig<ShowPetByIdQueryResponse>["data"]> {
    const res = await client<ShowPetByIdQueryResponse>({
        method: "get",
        url: \`/pets/\${petId}\`,
        ...options
    });
    return res.data;
}
",
  },
]
`;

exports[`OperationGenerator > [GET] should generate with pathParamsType \`object\` 1`] = `
[
  {
    "baseName": "showPetById.ts",
    "env": undefined,
    "exports": [],
    "id": undefined,
    "imports": [
      {
        "isTypeOnly": undefined,
        "name": "client",
        "path": "@kubb/swagger-client/client",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "ResponseConfig",
        ],
        "path": "@kubb/swagger-client/client",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "ShowPetByIdQueryResponse",
          "ShowPetByIdPathParams",
        ],
        "path": "showPetById.ts",
        "root": "showPetById.ts",
      },
    ],
    "meta": {
      "name": "showPetById",
      "pluginKey": undefined,
      "tag": "pets",
    },
    "override": undefined,
    "path": "showPetById.ts",
    "source": "/**
     * @summary Info for a specific pet
     * @link /pets/:pet_id */
export async function showPetById({ petId, testId }: ShowPetByIdPathParams, options: Partial<Parameters<typeof client>[0]> = {}): Promise<ResponseConfig<ShowPetByIdQueryResponse>["data"]> {
    const res = await client<ShowPetByIdQueryResponse>({
        method: "get",
        url: \`/pets/\${petId}\`,
        ...options
    });
    return res.data;
}
",
  },
]
`;

exports[`OperationGenerator > [GET] should generate with templates 1`] = `
[
  {
    "baseName": "showPetById.ts",
    "env": undefined,
    "exports": [],
    "id": undefined,
    "imports": [
      {
        "isTypeOnly": undefined,
        "name": "client",
        "path": "@kubb/swagger-client/client",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "ResponseConfig",
        ],
        "path": "@kubb/swagger-client/client",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "ShowPetByIdQueryResponse",
          "ShowPetByIdPathParams",
        ],
        "path": "showPetById.ts",
        "root": "showPetById.ts",
      },
      {
        "isTypeOnly": undefined,
        "name": "axios",
        "path": "axios",
        "root": undefined,
      },
    ],
    "meta": {
      "name": "showPetById",
      "pluginKey": undefined,
      "tag": "pets",
    },
    "override": undefined,
    "path": "showPetById.ts",
    "source": "/**
     * @summary Info for a specific pet
     * @link /pets/:pet_id */
export async function showPetById({ petId, testId }: ShowPetByIdPathParams, options: Partial<Parameters<typeof client>[0]> = {}): Promise<ResponseConfig<ShowPetByIdQueryResponse>["data"]> {
    return axios.get(\`/pets/\${petId}\`, options);
}
",
  },
]
`;
