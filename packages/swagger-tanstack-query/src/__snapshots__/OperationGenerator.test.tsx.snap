// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`OperationGenerator > [GET] should generate with pathParamsType \`inline\` 1`] = `
[
  {
    "baseName": "showPetById.ts",
    "env": undefined,
    "exports": [],
    "id": undefined,
    "imports": [
      {
        "isTypeOnly": undefined,
        "name": "client",
        "path": "@kubb/swagger-client/client",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "ResponseConfig",
        ],
        "path": "@kubb/swagger-client/client",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "ShowPetByIdQueryResponse",
          "ShowPetByIdPathParams",
          "ShowPetById200",
          "ShowPetByIdError",
        ],
        "path": "showPetById.ts",
        "root": "showPetById.ts",
      },
      {
        "isTypeOnly": true,
        "name": [
          "UseBaseQueryOptions",
          "UseQueryResult",
        ],
        "path": "@tanstack/react-query",
        "root": undefined,
      },
      {
        "isTypeOnly": undefined,
        "name": [
          "useQuery",
        ],
        "path": "@tanstack/react-query",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "QueryKey",
          "WithRequired",
        ],
        "path": "@tanstack/react-query",
        "root": undefined,
      },
    ],
    "meta": {
      "name": "showPetById",
      "pluginKey": undefined,
      "tag": "pets",
    },
    "override": undefined,
    "path": "showPetById.ts",
    "source": "type ShowPetByIdClient = typeof client<ShowPetByIdQueryResponse, never, never>;
type ShowPetById = {
    data: ShowPetByIdQueryResponse;
    error: never;
    request: never;
    pathParams: ShowPetByIdPathParams;
    queryParams: never;
    headerParams: never;
    response: ShowPetByIdQueryResponse;
    client: {
        parameters: Partial<Parameters<ShowPetByIdClient>[0]>;
        return: Awaited<ReturnType<ShowPetByIdClient>>;
    };
};
export const ShowPetByIdQueryKey = (petId: ShowPetByIdPathParams["pet_id"], testId: ShowPetByIdPathParams["testId"]) => [{ url: "/pets/:pet_id", params: { petId: petId } }] as const;
export type ShowPetByIdQueryKey = ReturnType<typeof ShowPetByIdQueryKey>;
export function ShowPetByIdQueryOptions<TData = ShowPetById["response"], TQueryData = ShowPetById["response"]>(petId: ShowPetByIdPathParams["pet_id"], testId: ShowPetByIdPathParams["testId"], options: ShowPetById["client"]["parameters"] = {}): WithRequired<UseBaseQueryOptions<ShowPetById["response"], ShowPetById["error"], TData, TQueryData>, "queryKey"> {
    const queryKey = ShowPetByIdQueryKey(petId, testId);
    return {
        queryKey,
        queryFn: async () => {
            const res = await client<ShowPetById["data"], ShowPetById["error"]>({
                method: "get",
                url: \`/pets/\${petId}\`,
                ...options
            });
            return res.data;
        },
    };
}
/**
     * @summary Info for a specific pet
     * @link /pets/:pet_id */
export function showPetById<TData = ShowPetById["response"], TQueryData = ShowPetById["response"], TQueryKey extends QueryKey = ShowPetByIdQueryKey>(petId: ShowPetByIdPathParams["pet_id"], testId: ShowPetByIdPathParams["testId"], options: {
    query?: Partial<UseBaseQueryOptions<ShowPetById["response"], ShowPetById["error"], TData, TQueryData, TQueryKey>>;
    client?: ShowPetById["client"]["parameters"];
} = {}): UseQueryResult<TData, ShowPetById["error"]> & {
    queryKey: TQueryKey;
} {
    const { query: queryOptions, client: clientOptions = {} } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? ShowPetByIdQueryKey(petId, testId);
    const query = useQuery<ShowPetById["data"], ShowPetById["error"], TData, any>({
        ...ShowPetByIdQueryOptions<TData, TQueryData>(petId, testId, clientOptions),
        queryKey,
        ...queryOptions
    }) as UseQueryResult<TData, ShowPetById["error"]> & {
        queryKey: TQueryKey;
    };
    query.queryKey = queryKey as TQueryKey;
    return query;
}
",
  },
]
`;

exports[`OperationGenerator > [GET] should generate with pathParamsType \`object\` 1`] = `
[
  {
    "baseName": "showPetById.ts",
    "env": undefined,
    "exports": [],
    "id": undefined,
    "imports": [
      {
        "isTypeOnly": undefined,
        "name": "client",
        "path": "@kubb/swagger-client/client",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "ResponseConfig",
        ],
        "path": "@kubb/swagger-client/client",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "ShowPetByIdQueryResponse",
          "ShowPetByIdPathParams",
          "ShowPetById200",
          "ShowPetByIdError",
        ],
        "path": "showPetById.ts",
        "root": "showPetById.ts",
      },
      {
        "isTypeOnly": true,
        "name": [
          "UseBaseQueryOptions",
          "UseQueryResult",
        ],
        "path": "@tanstack/react-query",
        "root": undefined,
      },
      {
        "isTypeOnly": undefined,
        "name": [
          "useQuery",
        ],
        "path": "@tanstack/react-query",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "QueryKey",
          "WithRequired",
        ],
        "path": "@tanstack/react-query",
        "root": undefined,
      },
    ],
    "meta": {
      "name": "showPetById",
      "pluginKey": undefined,
      "tag": "pets",
    },
    "override": undefined,
    "path": "showPetById.ts",
    "source": "type ShowPetByIdClient = typeof client<ShowPetByIdQueryResponse, never, never>;
type ShowPetById = {
    data: ShowPetByIdQueryResponse;
    error: never;
    request: never;
    pathParams: ShowPetByIdPathParams;
    queryParams: never;
    headerParams: never;
    response: ShowPetByIdQueryResponse;
    client: {
        parameters: Partial<Parameters<ShowPetByIdClient>[0]>;
        return: Awaited<ReturnType<ShowPetByIdClient>>;
    };
};
export const ShowPetByIdQueryKey = ({ petId, testId }: ShowPetByIdPathParams) => [{ url: "/pets/:pet_id", params: { petId: petId } }] as const;
export type ShowPetByIdQueryKey = ReturnType<typeof ShowPetByIdQueryKey>;
export function ShowPetByIdQueryOptions<TData = ShowPetById["response"], TQueryData = ShowPetById["response"]>({ petId, testId }: ShowPetByIdPathParams, options: ShowPetById["client"]["parameters"] = {}): WithRequired<UseBaseQueryOptions<ShowPetById["response"], ShowPetById["error"], TData, TQueryData>, "queryKey"> {
    const queryKey = ShowPetByIdQueryKey(petId, testId);
    return {
        queryKey,
        queryFn: async () => {
            const res = await client<ShowPetById["data"], ShowPetById["error"]>({
                method: "get",
                url: \`/pets/\${petId}\`,
                ...options
            });
            return res.data;
        },
    };
}
/**
     * @summary Info for a specific pet
     * @link /pets/:pet_id */
export function showPetById<TData = ShowPetById["response"], TQueryData = ShowPetById["response"], TQueryKey extends QueryKey = ShowPetByIdQueryKey>({ petId, testId }: ShowPetByIdPathParams, options: {
    query?: Partial<UseBaseQueryOptions<ShowPetById["response"], ShowPetById["error"], TData, TQueryData, TQueryKey>>;
    client?: ShowPetById["client"]["parameters"];
} = {}): UseQueryResult<TData, ShowPetById["error"]> & {
    queryKey: TQueryKey;
} {
    const { query: queryOptions, client: clientOptions = {} } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? ShowPetByIdQueryKey(petId, testId);
    const query = useQuery<ShowPetById["data"], ShowPetById["error"], TData, any>({
        ...ShowPetByIdQueryOptions<TData, TQueryData>({ petId, testId }, ShowPetByIdPathParams, clientOptions),
        queryKey,
        ...queryOptions
    }) as UseQueryResult<TData, ShowPetById["error"]> & {
        queryKey: TQueryKey;
    };
    query.queryKey = queryKey as TQueryKey;
    return query;
}
",
  },
]
`;
