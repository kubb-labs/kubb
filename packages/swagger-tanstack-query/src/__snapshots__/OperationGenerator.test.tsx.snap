// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`OperationGenerator > [DELETE] should generate with variablesType \`mutate\` 1`] = `
[
  {
    "baseName": "deletePet.ts",
    "env": undefined,
    "exports": [],
    "id": undefined,
    "imports": [
      {
        "isTypeOnly": undefined,
        "name": "client",
        "path": "@kubb/swagger-client/client",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "ResponseConfig",
        ],
        "path": "@kubb/swagger-client/client",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "DeletePetMutationResponse",
          "DeletePetPathParams",
          "DeletePetHeaderParams",
          "DeletePet400",
        ],
        "path": "deletePet.ts",
        "root": "deletePet.ts",
      },
      {
        "isTypeOnly": true,
        "name": [
          "UseMutationOptions",
          "UseMutationResult",
        ],
        "path": "@tanstack/react-query",
        "root": undefined,
      },
      {
        "isTypeOnly": undefined,
        "name": [
          "useMutation",
        ],
        "path": "@tanstack/react-query",
        "root": undefined,
      },
    ],
    "meta": {
      "name": "deletePet",
      "pluginKey": undefined,
      "tag": "pet",
    },
    "override": undefined,
    "path": "deletePet.ts",
    "source": "type DeletePetClient = typeof client<DeletePetMutationResponse, DeletePet400, never>;
type DeletePet = {
    data: DeletePetMutationResponse;
    error: DeletePet400;
    request: never;
    pathParams: DeletePetPathParams;
    queryParams: never;
    headerParams: DeletePetHeaderParams;
    response: DeletePetMutationResponse;
    client: {
        parameters: Partial<Parameters<DeletePetClient>[0]>;
        return: Awaited<ReturnType<DeletePetClient>>;
    };
};
/**
     * @description delete a pet
     * @summary Deletes a pet
     * @link /pet/:petId */
export function deletePet(options: {
    mutation?: UseMutationOptions<DeletePet["response"], DeletePet["error"], {
        petId: DeletePetPathParams["petId"];
        headers?: DeletePet["headerParams"];
    }>;
    client?: DeletePet["client"]["parameters"];
} = {}): UseMutationResult<DeletePet["response"], DeletePet["error"], {
    petId: DeletePetPathParams["petId"];
    headers?: DeletePet["headerParams"];
}> {
    const { mutation: mutationOptions, client: clientOptions = {} } = options ?? {};
    return useMutation<DeletePet["response"], DeletePet["error"], {
        petId: DeletePetPathParams["petId"];
        headers?: DeletePet["headerParams"];
    }>({
        mutationFn: async ({ petId, headers }) => {
            const res = await client<DeletePet["data"], DeletePet["error"], DeletePet["request"]>({
                method: "delete",
                url: \`/pet/\${petId}\`,
                headers: { ...headers, ...clientOptions.headers },
                ...clientOptions
            });
            return res.data;
        },
        ...mutationOptions
    });
}
",
  },
]
`;

exports[`OperationGenerator > [GET] should generate with pathParamsType \`inline\` 1`] = `
[
  {
    "baseName": "get_pets-uuid.ts",
    "env": undefined,
    "exports": [],
    "id": undefined,
    "imports": [
      {
        "isTypeOnly": undefined,
        "name": "client",
        "path": "@kubb/swagger-client/client",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "ResponseConfig",
        ],
        "path": "@kubb/swagger-client/client",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "GetPetsUuidQueryResponse",
        ],
        "path": "get_pets-uuid.ts",
        "root": "get_pets-uuid.ts",
      },
      {
        "isTypeOnly": true,
        "name": [
          "UseBaseQueryOptions",
          "UseQueryResult",
        ],
        "path": "@tanstack/react-query",
        "root": undefined,
      },
      {
        "isTypeOnly": undefined,
        "name": [
          "useQuery",
        ],
        "path": "@tanstack/react-query",
        "root": undefined,
      },
      {
        "isTypeOnly": true,
        "name": [
          "QueryKey",
          "WithRequired",
        ],
        "path": "@tanstack/react-query",
        "root": undefined,
      },
    ],
    "meta": {
      "name": "get_pets-uuid",
      "pluginKey": undefined,
      "tag": undefined,
    },
    "override": undefined,
    "path": "get_pets-uuid.ts",
    "source": "type GetPetsUuidClient = typeof client<GetPetsUuidQueryResponse, never, never>;
type GetPetsUuid = {
    data: GetPetsUuidQueryResponse;
    error: never;
    request: never;
    pathParams: never;
    queryParams: never;
    headerParams: never;
    response: GetPetsUuidQueryResponse;
    client: {
        parameters: Partial<Parameters<GetPetsUuidClient>[0]>;
        return: Awaited<ReturnType<GetPetsUuidClient>>;
    };
};
export const GetPetsUuidQueryKey = () => [{ url: "/pets/:uuid", params: { uuid: uuid } }] as const;
export type GetPetsUuidQueryKey = ReturnType<typeof GetPetsUuidQueryKey>;
export function GetPetsUuidQueryOptions<TData = GetPetsUuid["response"], TQueryData = GetPetsUuid["response"]>(options: GetPetsUuid["client"]["parameters"] = {}): WithRequired<UseBaseQueryOptions<GetPetsUuid["response"], GetPetsUuid["error"], TData, TQueryData>, "queryKey"> {
    const queryKey = GetPetsUuidQueryKey();
    return {
        queryKey,
        queryFn: async () => {
            const res = await client<GetPetsUuid["data"], GetPetsUuid["error"]>({
                method: "get",
                url: \`/pets/\${uuid}\`,
                ...options
            });
            return res.data;
        },
    };
}
/**
     * @link /pets/:uuid */
export function get_pets() { }
-uuid < TData;
GetPetsUuid["response"], TQueryData = GetPetsUuid["response"], TQueryKey;
QueryKey = GetPetsUuidQueryKey > (options);
{
    query ?  : Partial<UseBaseQueryOptions<GetPetsUuid["response"], GetPetsUuid["error"], TData, TQueryData, TQueryKey>>,
        client ?  : GetPetsUuid["client"]["parameters"];
}
{ }
UseQueryResult<TData, GetPetsUuid["error"]> & { queryKey: TQueryKey };
{
    const { query: queryOptions, client: clientOptions = {} } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? GetPetsUuidQueryKey();
    const query = useQuery<GetPetsUuid["data"], GetPetsUuid["error"], TData, any>({
        ...GetPetsUuidQueryOptions<TData, TQueryData>(clientOptions),
        queryKey,
        ...queryOptions
    }) as UseQueryResult<TData, GetPetsUuid["error"]> & {
        queryKey: TQueryKey;
    };
    query.queryKey = queryKey as TQueryKey;
    return query;
}
",
  },
]
`;

exports[`OperationGenerator > [GET] should generate with pathParamsType \`object\` 1`] = `[]`;

exports[`OperationGenerator > [POST] should generate with variablesType \`mutate\` 1`] = `[]`;
