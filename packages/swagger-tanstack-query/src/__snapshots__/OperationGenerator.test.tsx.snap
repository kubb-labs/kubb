// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`OperationGenerator > [DELETE] should generate with variablesType \`mutate\` 1`] = `
"import client from "@kubb/swagger-client/client";
import { useMutation } from "@tanstack/react-query";
import type { DeletePetMutationResponse, DeletePetPathParams, DeletePetHeaderParams, DeletePet400 } from "./";
import type { UseMutationOptions, UseMutationResult } from "@tanstack/react-query";

 type DeletePetClient = typeof client<DeletePetMutationResponse, DeletePet400, never>;
type DeletePet = {
    data: DeletePetMutationResponse;
    error: DeletePet400;
    request: never;
    pathParams: DeletePetPathParams;
    queryParams: never;
    headerParams: DeletePetHeaderParams;
    response: DeletePetMutationResponse;
    client: {
        parameters: Partial<Parameters<DeletePetClient>[0]>;
        return: Awaited<ReturnType<DeletePetClient>>;
    };
};
/**
     * @description delete a pet
     * @summary Deletes a pet
     * @link /pet/:petId */
export function deletePet(options: {
    mutation?: UseMutationOptions<DeletePet["response"], DeletePet["error"], {
        petId: DeletePetPathParams["petId"];
        headers?: DeletePet["headerParams"];
    }>;
    client?: DeletePet["client"]["parameters"];
} = {}): UseMutationResult<DeletePet["response"], DeletePet["error"], {
    petId: DeletePetPathParams["petId"];
    headers?: DeletePet["headerParams"];
}> {
    const { mutation: mutationOptions, client: clientOptions = {} } = options ?? {};
    return useMutation<DeletePet["response"], DeletePet["error"], {
        petId: DeletePetPathParams["petId"];
        headers?: DeletePet["headerParams"];
    }>({
        mutationFn: async ({ petId, headers }) => {
            const res = await client<DeletePet["data"], DeletePet["error"], DeletePet["request"]>({
                method: "delete",
                url: \`/pet/\${petId}\`,
                headers: { ...headers, ...clientOptions.headers },
                ...clientOptions
            });
            return res.data;
        },
        ...mutationOptions
    });
}
"
`;

exports[`OperationGenerator > [GET] should generate with pathParamsType \`inline\` 1`] = `
"import client from "@kubb/swagger-client/client";
import { useQuery } from "@tanstack/react-query";
import type { GetPetByIdQueryResponse, GetPetByIdPathParams, GetPetById400, GetPetById404 } from "./";
import type { UseBaseQueryOptions, UseQueryResult, QueryKey, WithRequired } from "@tanstack/react-query";

 type GetPetByIdClient = typeof client<GetPetByIdQueryResponse, GetPetById400 | GetPetById404, never>;
type GetPetById = {
    data: GetPetByIdQueryResponse;
    error: GetPetById400 | GetPetById404;
    request: never;
    pathParams: GetPetByIdPathParams;
    queryParams: never;
    headerParams: never;
    response: GetPetByIdQueryResponse;
    client: {
        parameters: Partial<Parameters<GetPetByIdClient>[0]>;
        return: Awaited<ReturnType<GetPetByIdClient>>;
    };
};
export const GetPetByIdQueryKey = (petId: GetPetByIdPathParams["petId"]) => [{ url: "/pet/:petId", params: { petId: petId } }] as const;
export type GetPetByIdQueryKey = ReturnType<typeof GetPetByIdQueryKey>;
export function GetPetByIdQueryOptions<TData = GetPetById["response"], TQueryData = GetPetById["response"]>(petId: GetPetByIdPathParams["petId"], options: GetPetById["client"]["parameters"] = {}): WithRequired<UseBaseQueryOptions<GetPetById["response"], GetPetById["error"], TData, TQueryData>, "queryKey"> {
    const queryKey = GetPetByIdQueryKey(petId);
    return {
        queryKey,
        queryFn: async () => {
            const res = await client<GetPetById["data"], GetPetById["error"]>({
                method: "get",
                url: \`/pet/\${petId}\`,
                ...options
            });
            return res.data;
        },
    };
}
/**
     * @description Returns a single pet
     * @summary Find pet by ID
     * @link /pet/:petId */
export function getPetById<TData = GetPetById["response"], TQueryData = GetPetById["response"], TQueryKey extends QueryKey = GetPetByIdQueryKey>(petId: GetPetByIdPathParams["petId"], options: {
    query?: Partial<UseBaseQueryOptions<GetPetById["response"], GetPetById["error"], TData, TQueryData, TQueryKey>>;
    client?: GetPetById["client"]["parameters"];
} = {}): UseQueryResult<TData, GetPetById["error"]> & {
    queryKey: TQueryKey;
} {
    const { query: queryOptions, client: clientOptions = {} } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? GetPetByIdQueryKey(petId);
    const query = useQuery<GetPetById["data"], GetPetById["error"], TData, any>({
        ...GetPetByIdQueryOptions<TData, TQueryData>(petId, clientOptions),
        queryKey,
        ...queryOptions
    }) as UseQueryResult<TData, GetPetById["error"]> & {
        queryKey: TQueryKey;
    };
    query.queryKey = queryKey as TQueryKey;
    return query;
}
"
`;

exports[`OperationGenerator > [GET] should generate with pathParamsType \`object\` 1`] = `
"import client from "@kubb/swagger-client/client";
import { useQuery } from "@tanstack/react-query";
import type { GetPetByIdQueryResponse, GetPetByIdPathParams, GetPetById400, GetPetById404 } from "./";
import type { UseBaseQueryOptions, UseQueryResult, QueryKey, WithRequired } from "@tanstack/react-query";

 type GetPetByIdClient = typeof client<GetPetByIdQueryResponse, GetPetById400 | GetPetById404, never>;
type GetPetById = {
    data: GetPetByIdQueryResponse;
    error: GetPetById400 | GetPetById404;
    request: never;
    pathParams: GetPetByIdPathParams;
    queryParams: never;
    headerParams: never;
    response: GetPetByIdQueryResponse;
    client: {
        parameters: Partial<Parameters<GetPetByIdClient>[0]>;
        return: Awaited<ReturnType<GetPetByIdClient>>;
    };
};
export const GetPetByIdQueryKey = ({ petId }: GetPetByIdPathParams) => [{ url: "/pet/:petId", params: { petId: petId } }] as const;
export type GetPetByIdQueryKey = ReturnType<typeof GetPetByIdQueryKey>;
export function GetPetByIdQueryOptions<TData = GetPetById["response"], TQueryData = GetPetById["response"]>({ petId }: GetPetByIdPathParams, options: GetPetById["client"]["parameters"] = {}): WithRequired<UseBaseQueryOptions<GetPetById["response"], GetPetById["error"], TData, TQueryData>, "queryKey"> {
    const queryKey = GetPetByIdQueryKey(petId);
    return {
        queryKey,
        queryFn: async () => {
            const res = await client<GetPetById["data"], GetPetById["error"]>({
                method: "get",
                url: \`/pet/\${petId}\`,
                ...options
            });
            return res.data;
        },
    };
}
/**
     * @description Returns a single pet
     * @summary Find pet by ID
     * @link /pet/:petId */
export function getPetById<TData = GetPetById["response"], TQueryData = GetPetById["response"], TQueryKey extends QueryKey = GetPetByIdQueryKey>({ petId }: GetPetByIdPathParams, options: {
    query?: Partial<UseBaseQueryOptions<GetPetById["response"], GetPetById["error"], TData, TQueryData, TQueryKey>>;
    client?: GetPetById["client"]["parameters"];
} = {}): UseQueryResult<TData, GetPetById["error"]> & {
    queryKey: TQueryKey;
} {
    const { query: queryOptions, client: clientOptions = {} } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? GetPetByIdQueryKey(petId);
    const query = useQuery<GetPetById["data"], GetPetById["error"], TData, any>({
        ...GetPetByIdQueryOptions<TData, TQueryData>({ petId }, GetPetByIdPathParams, clientOptions),
        queryKey,
        ...queryOptions
    }) as UseQueryResult<TData, GetPetById["error"]> & {
        queryKey: TQueryKey;
    };
    query.queryKey = queryKey as TQueryKey;
    return query;
}
"
`;

exports[`OperationGenerator > [POST] should generate with variablesType \`mutate\` 1`] = `
"import client from "@kubb/swagger-client/client";
import { useMutation } from "@tanstack/react-query";
import type { AddPetMutationRequest, AddPetMutationResponse, AddPet405 } from "./";
import type { UseMutationOptions, UseMutationResult } from "@tanstack/react-query";

 type AddPetClient = typeof client<AddPetMutationResponse, AddPet405, AddPetMutationRequest>;
type AddPet = {
    data: AddPetMutationResponse;
    error: AddPet405;
    request: AddPetMutationRequest;
    pathParams: never;
    queryParams: never;
    headerParams: never;
    response: AddPetMutationResponse;
    client: {
        parameters: Partial<Parameters<AddPetClient>[0]>;
        return: Awaited<ReturnType<AddPetClient>>;
    };
};
/**
     * @description Add a new pet to the store
     * @summary Add a new pet to the store
     * @link /pet */
export function addPet(options: {
    mutation?: UseMutationOptions<AddPet["response"], AddPet["error"], {
        data: AddPet["request"];
    }>;
    client?: AddPet["client"]["parameters"];
} = {}): UseMutationResult<AddPet["response"], AddPet["error"], {
    data: AddPet["request"];
}> {
    const { mutation: mutationOptions, client: clientOptions = {} } = options ?? {};
    return useMutation<AddPet["response"], AddPet["error"], {
        data: AddPet["request"];
    }>({
        mutationFn: async ({ data }) => {
            const res = await client<AddPet["data"], AddPet["error"], AddPet["request"]>({
                method: "post",
                url: \`/pet\`,
                data,
                ...clientOptions
            });
            return res.data;
        },
        ...mutationOptions
    });
}
"
`;
