/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { DeletePetMutationResponse, DeletePetPathParams, DeletePetHeaderParams, DeletePet400 } from '../../models/DeletePet.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, UseMutationResult, QueryClient } from '@tanstack/react-query'
import { mutationOptions, useMutation } from '@tanstack/react-query'

export const deletePetMutationKey = () => [{ url: '/pet/:pet_id' }] as const

export type DeletePetMutationKey = ReturnType<typeof deletePetMutationKey>

/**
 * @description delete a pet
 * @summary Deletes a pet
 * {@link /pet/:pet_id}
 */
export async function deletePetHook(
  { pet_id }: { pet_id: DeletePetPathParams['pet_id'] },
  headers?: DeletePetHeaderParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<DeletePetMutationResponse, ResponseErrorConfig<DeletePet400>, unknown>({
    method: 'DELETE',
    url: `/pet/${pet_id}`,
    ...requestConfig,
    headers: { ...headers, ...requestConfig.headers },
  })
  return res.data
}

export function deletePetMutationOptionsHook(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const mutationKey = deletePetMutationKey()
  return mutationOptions<
    DeletePetMutationResponse,
    ResponseErrorConfig<DeletePet400>,
    { pet_id: DeletePetPathParams['pet_id']; headers?: DeletePetHeaderParams },
    typeof mutationKey
  >({
    mutationKey,
    mutationFn: async ({ pet_id, headers }) => {
      return deletePetHook({ pet_id }, headers, config)
    },
  })
}

/**
 * @description delete a pet
 * @summary Deletes a pet
 * {@link /pet/:pet_id}
 */
export function useDeletePetHook<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeletePetMutationResponse,
      ResponseErrorConfig<DeletePet400>,
      { pet_id: DeletePetPathParams['pet_id']; headers?: DeletePetHeaderParams },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? deletePetMutationKey()

  const baseOptions = deletePetMutationOptionsHook(config) as UseMutationOptions<
    DeletePetMutationResponse,
    ResponseErrorConfig<DeletePet400>,
    { pet_id: DeletePetPathParams['pet_id']; headers?: DeletePetHeaderParams },
    TContext
  >

  return useMutation<
    DeletePetMutationResponse,
    ResponseErrorConfig<DeletePet400>,
    { pet_id: DeletePetPathParams['pet_id']; headers?: DeletePetHeaderParams },
    TContext
  >(
    {
      ...baseOptions,
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  ) as UseMutationResult<
    DeletePetMutationResponse,
    ResponseErrorConfig<DeletePet400>,
    { pet_id: DeletePetPathParams['pet_id']; headers?: DeletePetHeaderParams },
    TContext
  >
}
